/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */

import java.util.*;
public class Solution{ 
    
    public List<Interval> merge(List<Interval> intervals) {
		int size=intervals.size();
		if(size<=1) return intervals;       
		quickSort(intervals,0,size);		

		Interval cur=intervals.get(0);
		int start=cur.start, end=cur.end;
			
			//merge
		    for(int i=1;i<size;i++){
		 		Interval it=intervals.get(i);
		 		if(end>=it.start){

		 			intervals.remove(i-1);
					intervals.remove(i-1);
		 			end=Integer.max(end,it.end);
		 			Interval tmp=new Interval(start,end);
		 			intervals.add(i-1,tmp);
				size--;
		 		}else{
		 			start=it.start;
		 			end=it.end;
		 		}
		    }
		    return intervals;
    }

	public void quickSort(List<Interval> intervals,int h, int t){
		int i=h+1;
		int ref=intervals.get(h).start;		
		for(int j=h+1;j<t;j++){
			if(intervals.get(i).start <	ref){
				swap(intervals,j,i);
				i++;			
			}	
		}
		swap(intervals,h,i-1);
		if(i>h+1) quickSort(intervals,h,i);
		if(t>i+1) quickSort(intervals,i,t);
		
	}
	
	public void swap( List<Interval> intervals,int i, int j){
		if(i==j) return;
    	Interval itmp=intervals.get(i);
		Interval jtmp=intervals.get(j);
		intervals.remove(i);
		intervals.add(i,jtmp);
		intervals.remove(j);
		intervals.add(j,itmp);
	}
	
}
